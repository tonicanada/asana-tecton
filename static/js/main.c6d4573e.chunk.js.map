{"version":3,"sources":["components/TaskList/TaskList.component.jsx","App.js","serviceWorker.js","index.js"],"names":["client","asana","Client","create","useAccessToken","TaskList","state","tasks","users","me","then","user","workspaceId","workspaces","gid","findAll","assignee","props","workspace","completed_since","opt_fields","response","setState","data","catch","e","console","log","this","length","map","task","key","name","Component","App","employee","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uPAGMA,G,OAASC,IAAMC,OAAOC,SAASC,eACnC,uCA6DaC,E,YAzDb,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXC,MAAO,IAJG,E,iFAQO,IAAD,OAClBP,EAAOQ,MACJC,KACAC,MAAK,SAAAC,GAIJ,IAAMC,EAAcD,EAAKE,WAAW,GAAGC,IACvC,OAAOd,EAAOO,MAAMQ,QAAQ,CAC1BC,SAAU,EAAKC,MAAMH,IACrBI,UAAWN,EACXO,gBAAiB,MACjBC,WAAY,yCAGfV,MAAK,SAAAW,GAIJ,EAAKC,SAAS,CAAEf,MAAOc,EAASE,UAcjCC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,+BAIhB,OACE,6BACGG,KAAKtB,MAAMC,MAAMsB,OAAS,EACvBD,KAAKtB,MAAMC,MAAMuB,KAAI,SAAAC,GAAI,OAC3B,wBAAIC,IAAKD,EAAKjB,KAAMiB,EAAKE,SACvB,6E,GApDWC,aCDjBlC,EAASC,IAAMC,OAAOC,SAASC,eACnC,sCAgDa+B,E,YA5Cb,aAAe,IAAD,8BACZ,+CAEK7B,MAAQ,CACX8B,SAAU,IAJA,E,iFAQO,IAAD,OAClBpC,EAAOQ,MACJC,KACAC,MAAK,SAAAC,GAAI,OACRX,EAAOQ,MAAMO,QAAQ,CACnBG,UAAWP,EAAKE,WAAW,GAAGC,SAGjCJ,MAAK,SAAAF,GAAK,OACT,EAAKc,SAAS,CACZc,SAAU5B,EAAMe,KAAKc,QACnB,SAAA1B,GAAI,MACY,mBAAdA,EAAKsB,MACS,uBAAdtB,EAAKsB,MACS,eAAdtB,EAAKsB,MACS,UAAdtB,EAAKsB,e,+BAOf,OACE,6BACE,+DACCL,KAAKtB,MAAM8B,SAASN,KAAI,SAAAM,GAAQ,OAC/B,yBAAKJ,IAAKI,EAAStB,KACjB,4BAAKsB,EAASH,MACd,kBAAC,EAAD,CAAUnB,IAAKsB,EAAStB,e,GArClBoB,aCEEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,iB","file":"static/js/main.c6d4573e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport asana from \"asana\";\n\nconst client = asana.Client.create().useAccessToken(\n  \"0/2666640935648a97886c69208f2b3f51\"\n);\n\nclass TaskList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      tasks: []\n    };\n  }\n\n  componentDidMount() {\n    client.users\n      .me()\n      .then(user => {\n        // The user's \"default\" workspace is the first one in the list, though\n        // any user can have multiple workspaces so you can't always assume this\n        // is the one you want to work with.\n        const workspaceId = user.workspaces[1].gid;\n        return client.tasks.findAll({\n          assignee: this.props.gid,\n          workspace: workspaceId,\n          completed_since: \"now\",\n          opt_fields: \"id,name,assignee_status,completed\"\n        });\n      })\n      .then(response => {\n        // There may be more pages of data, we could stream or return a promise\n        // to request those here - for now, let's just return the first page\n        // of items.\n        this.setState({ tasks: response.data });\n      })\n      // .filter(task => {\n      //   return task.assignee_status === 'today' ||\n      //     task.assignee_status === 'new';\n      // })\n      //   .then(list => {\n      //     console.log(\n      //       util.inspect(list, {\n      //         colors: true,\n      //         depth: null\n      //       })\n      //     );\n      //   })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n  render() {\n    return (\n      <div>\n        {this.state.tasks.length > 0 ?\n            this.state.tasks.map(task => (\n          <li key={task.gid}>{task.name}</li>\n        )): <p>No hay tareas incompletas para mostrar...</p>}\n      </div>\n    );\n  }\n}\n\nexport default TaskList;\n","import React, { Component } from \"react\";\nimport asana from \"asana\";\nimport \"./App.css\";\nimport TaskList from \"./components/TaskList/TaskList.component\";\n\n\nconst client = asana.Client.create().useAccessToken(\n  \"0/de3066f1832547c89a2117b5516bcc9c\"\n);\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      employee: []\n    };\n  }\n\n  componentDidMount() {\n    client.users\n      .me()\n      .then(user =>\n        client.users.findAll({\n          workspace: user.workspaces[1].gid\n        })\n      )\n      .then(users =>\n        this.setState({\n          employee: users.data.filter(\n            user =>\n              user.name !== \"Luis Izquierdo\" &&\n              user.name !== \"HÃ©ctor Riquelme\" &&\n              user.name !== \"mquinteros\" &&\n              user.name !== \"pedro\"\n          )\n        })\n      );\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Tareas en curso oficina central</h1>\n        {this.state.employee.map(employee => (\n          <div key={employee.gid}>\n            <h2>{employee.name}</h2>\n            <TaskList gid={employee.gid}></TaskList>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}